method, actual, expected
setFeatureDesiredProperty,/** * Sets a desired property value for a feature. *  * @param featureId the feature identifier * @param desiredPropertyPath the JSON pointer to the desired property * @param desiredPropertyValue the desired property value to set * @return the updated Thing with the desired property set */```java/** * Sets a desired property value for a feature. *  * @param featureId the feature identifier * @param desiredPropertyPath the JSON pointer to the desired property * @param desiredPropertyValue the desired property value to set * @return the updated Thing with the desired property set */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
setLifecycle,/** * Sets the lifecycle of this thing. *  * @param newLifecycle the new lifecycle to set * @return this thing instance for method chaining */,/**     * Sets the given lifecycle to a copy of this Thing.     *     * @param newLifecycle the lifecycle to set.     * @return a copy of this Thing with the lifecycle set to {@code newLifecycle}.     * @throws NullPointerException if {@code newLifecycle} is {@code null}.     */
setAttribute,/** * Sets a boolean attribute at the specified path. * * @param attributePath the path to the attribute * @param attributeValue the boolean value to set * @return this Thing with the attribute set */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
RetrieveFeatureStrategy,/** * Constructs a new RetrieveFeatureStrategy. * * @param actorSystem the actor system to use for WoT thing description provider */,/**     * Constructs a new {@code RetrieveFeatureStrategy} object.     *     * @param actorSystem the actor system to use for loading the WoT extension.     */
setFeatureProperty,/** * Sets a feature property value. *  * @param featureId the feature identifier * @param propertyPath the property path * @param propertyValue the property value * @return this instance */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
setFeatureProperties,/** * Sets the properties for a specific feature. *  * @param featureId the ID of the feature to update * @param properties the new properties to set for the feature * @return the updated Thing instance */,/**     * Sets the given properties of a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param properties the properties to be set.     * @return a copy of this Thing with the Feature containing the given properties.     * @throws NullPointerException if {@code featureId} is {@code null}.     */
setFeatureProperty,/** * Sets a boolean property value for a feature. *  * @param featureId the feature identifier * @param propertyPath the property path * @param propertyValue the boolean property value * @return the updated feature */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
of,/** * Creates a new RollbackCreatedPolicy instance. * * @param initialCommand the initial command signal * @param response the response object * @param responseFuture the response future * @return a new RollbackCreatedPolicy instance */,/**         * Initialises an instance of {@link org.eclipse.ditto.things.service.persistence.actors.ThingSupervisorActor.RollbackCreatedPolicy}         *         * @param initialCommand the initial initialCommand that triggered the creation of a thing and policy         * @param response the response from the thing persistence actor         * @param responseFuture a future that when completed with the response from the thing persistence actor the response         * will be sent to the initial sender.         * @return an instance of {@link org.eclipse.ditto.things.service.persistence.actors.ThingSupervisorActor.RollbackCreatedPolicy}         */
DeleteFeaturePropertiesStrategy,/** * Constructor for DeleteFeatureProperties strategy. * @param DeleteFeatureProperties the class type for this strategy */,/**     * Constructs a new {@code DeleteFeaturePropertiesStrategy} object.     */
toBuilder,/** * Creates a new ThingBuilder initialized with this instance's data. *  * @return a new ThingBuilder containing a copy of this instance */,/**     * Returns a mutable builder with a fluent API for immutable {@code Thing}. The builder is initialised with the     * entries of this instance.     *     * @return the new builder.     */
removeFeatureDesiredProperties,/** * Removes desired properties of a feature. * @param featureId the identifier of the feature * @return the modified thing */,/**     * Removes all desired properties from the given Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature of which all desired properties are to be removed.     * @return a copy of this Thing with all of the Feature's desired properties removed.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @since 1.5.0     */
setFeatureDefinition,/** * Sets the feature definition for the specified feature ID. *  * @param featureId the ID of the feature to define * @param definition the feature definition to set * @return this Thing instance for method chaining */,/**     * Sets the given definition of a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param definition the definition to be set.     * @return a copy of this Thing with the Feature containing the given definition.     * @throws NullPointerException if {@code featureId} is {@code null}.     */
setPolicyId,/** * Sets the policy ID. *  * @param policyId the policy ID (can be null) * @return this instance for method chaining */,/**     * Sets the given Policy ID on a copy of this Thing.     *     * @param policyId the Policy ID to set.     * @return a copy of this Thing with {@code policyId} as its Policy ID.     */
removeFeatureDesiredProperty,/** * Removes a desired property from a feature. * * @param featureId    the ID of the feature * @param propertyPath the path to the property to remove * @return the modified Thing instance */,/**     * Removes the given desired property from a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the desired property to be removed.     * @return a copy of this Thing with the given Features desired property removed.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
of,/** * Creates an immutable feature with the given parameters. * * @param featureId the feature ID (must not be null and must be valid) * @param definition the feature definition (may be null) * @param properties the feature properties (may be null) * @param desiredProperties the desired feature properties (may be null) * @return a new immutable feature instance * @throws JsonKeyInvalidException if the feature ID contains invalid characters */,/**     * Creates a new Feature with a specified ID, Definition, properties and desired properties.     *     * @param featureId the ID.     * @param definition the Definition or {@code null}.     * @param properties the properties or {@code null}.     * @param desiredProperties the desired properties or {@code null}     * @return the new Feature.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @throws JsonKeyInvalidException if {@code featureId} was not valid according to pattern     * {@link org.eclipse.ditto.base.model.entity.id.RegexPatterns#NO_CONTROL_CHARS_NO_SLASHES_PATTERN}.     * @since 1.5.0     */
removeFeatureProperty,/** * Removes a feature property by its path. * @param featureId the feature identifier * @param propertyPath the property path to remove * @return the modified Thing instance */,/**     * Removes the given property from a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be removed.     * @return a copy of this Thing with the given Feature property removed.     * @throws NullPointerException if any argument is {@code null}.     */
setAttribute,/** * Sets the attribute at the specified JSON pointer path. *  * @param attributePath the JSON pointer path to the attribute * @param attributeValue the value to set at the specified path * @return the updated Thing instance */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
setFeatureProperty,/** * Sets a feature property by converting path and value to JSON types. * * @param featureId     the feature identifier * @param propertyPath  the property path as character sequence * @param propertyValue the property value as string * @return the updated thing instance */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
of,/** * Creates an immutable feature instance. *  * @param featureId the feature ID (must not be null and must be valid) * @param properties the feature properties (optional) * @return a new immutable feature instance * @throws JsonKeyInvalidException if the feature ID contains invalid characters */,/**     * Creates a new Feature with a specified ID and properties.     *     * @param featureId the ID.     * @param properties the properties. Can also be {@code null}.     * @return the new Feature.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @throws JsonKeyInvalidException if {@code featureId} was not valid according to pattern     * {@link org.eclipse.ditto.base.model.entity.id.RegexPatterns#NO_CONTROL_CHARS_NO_SLASHES_PATTERN}.     */
newInstance,/** * Creates a new instance of NullFeatures. *  * @return a new NullFeatures instance */,/**     * Creates a new instance of Features with value JSON NULL.     *     * @return a new NullFeatures.     * @throws NullPointerException if {@code featureId} is {@code null}.     */
of,/** * Creates an immutable feature instance. *  * @param featureId the feature ID (must not be null and must be valid) * @param definition the feature definition (optional) * @param properties the feature properties (optional) * @return a new immutable feature instance * @throws JsonKeyInvalidException if the feature ID contains invalid characters */,/**     * Creates a new Feature with a specified ID, Definition and properties.     *     * @param featureId the ID.     * @param definition the Definition or {@code null}.     * @param properties the properties or {@code null}.     * @return the new Feature.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @throws JsonKeyInvalidException if {@code featureId} was not valid according to pattern     * {@link org.eclipse.ditto.base.model.entity.id.RegexPatterns#NO_CONTROL_CHARS_NO_SLASHES_PATTERN}.     */
removeFeatureProperty,/** * Removes a feature property by its JSON pointer path. * @param featureId the ID of the feature to modify * @param propertyPath the JSON pointer path to the property to remove * @return the removed property value, or null if not found */,/**     * Removes the given property from a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be removed.     * @return a copy of this Thing with the given Feature property removed.     * @throws NullPointerException if any argument is {@code null}.     */
fromJson,/** * Creates a {@code ThingNotAccessibleException} from a JSON object. *  * @param jsonObject the JSON object representation of the exception * @param dittoHeaders the headers of the command which caused the exception * @return the deserialized ThingNotAccessibleException */,/**     * Constructs a new {@code ThingNotAccessibleException} object with the exception message extracted from the given     * JSON object.     *     * @param jsonObject the JSON to read the {@link org.eclipse.ditto.base.model.exceptions.DittoRuntimeException.JsonFields#MESSAGE} field from.     * @param dittoHeaders the headers of the command which resulted in this exception.     * @return the new ThingNotAccessibleException.     * @throws NullPointerException if any argument is {@code null}.     * @throws org.eclipse.ditto.json.JsonMissingFieldException if this JsonObject did not contain an error message.     * @throws org.eclipse.ditto.json.JsonParseException if the passed in {@code jsonObject} was not in the expected     * format.     */
setFeatureDesiredProperty,/** * Sets a desired property value for a feature. *  * @param featureId the feature identifier * @param desiredPropertyPath the JSON pointer path to the desired property * @param desiredPropertyValue the desired property value * @return the updated thing */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
removeDefinition,/** * Removes and returns the definition of this thing. * @return the removed definition, or null if none */,/**     * Removes the Thing's definition on a copy of this Thing.     *     * @return a copy of this Thing without definition.     */
setFeatureDesiredProperty,/** * Sets the desired property of a feature. * * @param featureId the feature ID * @param desiredPropertyPath the JSON pointer path to the desired property * @param desiredPropertyValue the desired property value * @return this Thing for method chaining */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
getPolicyId,/** * Retrieves the policy ID. *  * @return an Optional containing the policy ID, or empty if not present */,/**     * Returns the Policy ID of this Thing.     *     * @return the Policy ID of this Thing.     */
setAttribute,/** * Sets a numeric attribute at the specified path. * * @param attributePath  the path to the attribute to set * @param attributeValue the numeric value to set * @return this Thing with the attribute set */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
setAttribute,/** * Sets a long attribute at the specified path. * * @param attributePath the path to the attribute * @param attributeValue the long value to set * @return this Thing with the attribute set */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
setFeatures,/** * Sets the features for this thing. *  * @param features the features to set, may be null * @return this thing instance for method chaining */,/**     * Sets the given Features to a copy of this Thing.     *     * @param features the Features to be set.     * @return a copy of this Thing with the features set.     */
setAttribute,/** * Sets the attribute at the specified path to the given value. * * @param attributePath  the path to the attribute to set * @param attributeValue the value to set the attribute to * @return this Thing instance for method chaining */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
completeInitialResponse,/** * Completes the response future based on the initial response and provided throwable. *  * @param throwable the exception to complete with, may be null */,/**         * Completes the responseFuture with the response which in turn should send the Persistence actor response to         * the initial sender. If an additional exception occurs during policy rollback the responseFuture will be         * completed with that exception and adding the target actor exception as suppressed warning.         *         * @param throwable the additional optional exception occurred during the rollback process.         */
hasLifecycle,/** * Checks if the thing has the specified lifecycle. *  * @param lifecycle the lifecycle to check for * @return true if the thing has the specified lifecycle, false otherwise */,/**     * Indicates whether this Thing has the given lifecycle.     *     * @param lifecycle the lifecycle to be checked for.     * @return {@code true} if this Thing has {@code lifecycle} as its lifecycle, {@code false} else.     */
setAttribute,/** * Sets an integer attribute at the specified path. * * @param attributePath the path to the attribute * @param attributeValue the integer value to set * @return this Thing with the attribute set */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
removeFeatureDesiredProperty,/** * Removes a desired property from a feature. * @param featureId the ID of the feature to modify * @param propertyPath the JSON pointer to the property to remove * @return the modified Thing instance */,/**     * Removes the given desired property from a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the desired property to be removed.     * @return a copy of this Thing with the given Feature desired property removed.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
setFeatureProperty,/** * Sets a feature property value. * @param featureId the feature ID * @param propertyPath the property path * @param propertyValue the property value * @return this instance for method chaining */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
getFeatures,/** * Retrieves the features. *  * @return Optional containing the features, or empty if not available */,/**     * Returns the Features of this Thing.     *     * @return the Features of this Thing.     */
setFeatureDesiredProperty,/** * Sets a desired property value for a feature. * * @param featureId the feature identifier * @param desiredPropertyPath the JSON pointer path to the desired property * @param desiredPropertyValue the desired integer value to set * @return the updated Thing instance */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
setFeatureDesiredProperties,/** * Sets desired properties for a feature. *  * @param featureId the feature identifier * @param desiredProperties the desired properties to set * @return this Thing instance for method chaining */,/**     * Sets the given desired properties of a Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredProperties the desired properties to be set.     * @return a copy of this Thing with the Feature containing the given desired properties.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @since 1.5.0     */
getLifecycle,/** * Gets the lifecycle of the thing. *  * @return lifecycle of the thing, may be empty */,/**     * Returns the current lifecycle of this Thing.     *     * @return the current lifecycle of this Thing.     */
setFeatureDesiredProperty,/** * Sets a desired property value for a feature. *  * @param featureId the feature ID * @param desiredPropertyPath the property path * @param desiredPropertyValue the desired property value * @return this Thing with the updated desired property */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
removeAttribute,/** * Removes attribute at specified path. * @param attributePath the path to the attribute to remove * @return this instance with attribute removed */,/**     * Removes the attribute at the given path from a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute to be removed.     * @return a copy of this Thing without the removed attribute.     * @throws NullPointerException if {@code pointer} is {@code null}.     * @throws IllegalArgumentException if {@code pointer} is empty.     */
shouldRollbackBasedOnException,/** * Determines if rollback is needed based on signal type and exception. *  * @param signal the signal to check * @param throwable the exception that occurred, may be null * @return true if rollback should occur for CreateThing signal with specific exceptions */,/**         * Evaluates if a failure in the creation of a thing should lead to deleting of that thing's policy.         *         * @param signal the initial signal.         * @param throwable the throwable received from the Persistence Actor         * @return if the thing's policy is to be deleted.         */
getAttributes,/** * Retrieves the attributes. *  * @return the attributes, or empty if not present */,/**     * Returns the attributes of this Thing.     *     * @return the attributes of this Thing.     */
setFeatureDesiredProperty,/** * Sets the desired property of a feature. * * @param featureId the feature ID * @param desiredPropertyPath the path to the desired property * @param desiredPropertyValue the desired property value * @return this instance */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
setFeatureProperty,/** * Sets a feature property by converting the property path to a JsonPointer. * * @param featureId     the ID of the feature * @param propertyPath  the path to the property as CharSequence * @param propertyValue the value to set * @return the updated Thing */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
fromMessage,/** * Creates a ThingNotAccessibleException from the given message and headers. * * @param message the exception message, may be null * @param dittoHeaders the headers containing context information * @return the created ThingNotAccessibleException */,/**     * Constructs a new {@code ThingNotAccessibleException} object with given message.     *     * @param message detail message. This message can be later retrieved by the {@link #getMessage()} method.     * @param dittoHeaders the headers of the command which resulted in this exception.     * @return the new ThingNotAccessibleException.     * @throws NullPointerException if {@code dittoHeaders} is {@code null}.     */
removeFeature,/** * Removes a feature by its ID. *  * @param featureId the ID of the feature to remove * @return the removed feature, or null if not found */,/**     * Removes the Feature with the specified ID from a copy of this Thing.     *     * @param featureId the ID of the Feature to be removed.     * @return a copy of this Thing without the Feature with the given ID.     */
removeFeatureProperties,/** * Removes all properties from a feature. * @param featureId the ID of the feature to remove properties from * @return the modified Thing with properties removed */,/**     * Removes all properties from the given Feature on a copy of this Thing.     *     * @param featureId the ID of the Feature of which all properties are to be removed.     * @return a copy of this Thing with all of the Feature's properties removed.     * @throws NullPointerException if {@code featureId} is {@code null}.     */
ThingNotAccessibleException,/** * Constructs a new ThingNotAccessibleException. * * @param thingId the thing ID to format into message (not null) * @param dittoHeaders the headers of the command which caused this exception * @throws NullPointerException if thingId is null */,/**     * Constructs a new {@code ThingNotAccessibleException} object.     *     * @param thingId the ID of the Thing which is not accessible.     * @param dittoHeaders the headers with which this Exception should be reported back to the user.     * @throws NullPointerException if any argument is {@code null}.     */
setFeatureProperty,/** * Sets a property value for a feature. * @param featureId the ID of the feature * @param propertyPath the JSON pointer to the property * @param propertyValue the value to set * @return this Thing instance */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
removeAttributes,/** * Removes all attributes from this thing. *  * @return this thing with all attributes removed */,/**     * Removes all attributes from a copy of this Thing.     *     * @return a copy of this Thing with all of its attributes removed.     */
setAttributes,/** * Sets the attributes of this thing. * @param attributes the attributes to set (can be null) * @return this thing instance for method chaining */,/**     * Sets the attributes on a copy of this Thing.     *     * @param attributes the attributes.     * @return a copy of this Thing with the given attributes.     */
setDefinition,/** * Sets the definition identifier for this thing. *  * @param definitionIdentifier the definition identifier, may be null * @return this thing instance for method chaining */,/**     * Sets the definition on a copy of this Thing.     *     * @param definitionIdentifier the Thing's definition to set.     * @return a copy of this Thing with the given definition.     * @throws DefinitionIdentifierInvalidException if {@code definitionIdentifier} is invalid.     */
setFeatureDesiredProperty,/** * Sets a desired property value for a feature. * * @param featureId the feature identifier * @param desiredPropertyPath the JSON pointer path to the desired property * @param desiredPropertyValue the desired property value * @return this Thing instance */,/**     * Sets the given desired property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param desiredPropertyPath the hierarchical path within the Feature to the desired property to be set.     * @param desiredPropertyValue the desired property value to be set.     * @return a copy of this Thing with the Feature containing the given desired property.     * @throws NullPointerException if any argument is {@code null}.     * @since 1.5.0     */
setAttribute,/** * Sets the attribute at the specified path to the given value. *  * @param attributePath the path to the attribute * @param attributeValue the value to set * @return this instance for method chaining */,/**     * Sets the given attribute on a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute value.     * @param attributeValue the attribute value to be set.     * @return a copy of this Thing with the given attribute.     * @throws NullPointerException if any argument is {@code null}.     * @throws IllegalArgumentException if {@code attributePath} is empty.     */
getNamespace,/** * Retrieves the namespace. *  * @return the namespace, may be empty */,/**     * Returns the namespace this Thing was created in. The namespace is derived from the ID of this Thing.     *     * @return the namespace this Thing was created in.     */
removeFeatureDefinition,/** * Removes the feature definition with the specified ID. *  * @param featureId the ID of the feature definition to remove * @return the removed feature definition, or null if not found */,/**     * Removes the definition from the Feature of this thing with the specified feature ID.     *     * @param featureId the identifier of the Feature to delete the definition from.     * @return a copy of this Thing with the Feature without definition.     * @throws NullPointerException if {@code featureId} is {@code null}.     */
newBuilder,/** * Creates a new ThingBuilder instance from scratch. *  * @return a new ThingBuilder instance */,/**     * Returns a mutable builder with a fluent API for an immutable {@code Thing} from scratch.     *     * @return the new builder.     */
setFeature,/** * Sets the feature of this thing. *  * @param feature the feature to set * @return this thing with the feature set */,/**     * Sets the given Feature to a copy of this Thing. An already existing Feature with the same ID is replaced.     *     * @param feature the Feature to be set.     * @return a copy of this Thing with the given feature.     * @throws NullPointerException if {@code feature} is {@code null}.     */
removeAttribute,/** * Removes attribute at specified JSON pointer path. * @param attributePath JSON pointer path to attribute to remove * @return this Thing instance for method chaining */,/**     * Removes the attribute at the given path from a copy of this Thing.     *     * @param attributePath the hierarchical path to the attribute to be removed.     * @return a copy of this Thing without the removed attribute.     * @throws NullPointerException if {@code pointer} is {@code null}.     * @throws IllegalArgumentException if {@code pointer} is empty.     */
setFeatureProperty,/** * Sets a feature property to a long value. *  * @param featureId the feature identifier * @param propertyPath the property path * @param propertyValue the long property value * @return the updated Thing instance */,/**     * Sets the given property to the Feature with the given ID on a copy of this Thing.     *     * @param featureId the ID of the Feature.     * @param propertyPath the hierarchical path within the Feature to the property to be set.     * @param propertyValue the property value to be set.     * @return a copy of this Thing with the Feature containing the given property.     * @throws NullPointerException if any argument is {@code null}.     */
getDefinition,/** * Retrieves the definition of the thing. *  * @return an Optional containing the ThingDefinition if present, otherwise empty */,/**     * Gets the definition of this Thing.     *     * @return the Definition of this Thing.     */
of,/** * Creates an immutable feature instance with only a feature ID. *  * @param featureId the feature ID (must not be null and must be valid) * @return a new immutable feature instance * @throws JsonKeyInvalidException if the feature ID contains invalid characters */,/**     * Creates a new Feature with a specified ID.     *     * @param featureId the ID.     * @return the new Feature.     * @throws NullPointerException if {@code featureId} is {@code null}.     * @throws JsonKeyInvalidException if {@code featureId} was not valid according to pattern     * {@link org.eclipse.ditto.base.model.entity.id.RegexPatterns#NO_CONTROL_CHARS_NO_SLASHES_PATTERN}.     */
shouldRollbackBasedOnTargetActorResponse,/** * Determines if rollback is needed based on target actor response. * * @param command the command to check * @param response the response from target actor, may be null * @return true if command is CreateThing and response is DittoRuntimeException */,/**         * Evaluates if a failure in the creation of a thing should lead to deleting of that thing's policy.         * Should be used only to evaluate exceptions from the target actor not the enforcement actor.         *         * @param command the initial command.         * @param response the response from the {@link org.eclipse.ditto.things.service.persistence.actors.ThingPersistenceActor}.         * @return if the thing's policy is to be deleted.         */
newBuilder,/** * Creates a new Builder instance for the specified ThingId. *  * @param thingId the identifier for the thing to build * @return a new Builder instance initialized with the given thingId */,/**     * A mutable builder for a {@code ThingNotAccessibleException}.     *     * @param thingId the ID of the thing.     * @return the builder.     * @throws NullPointerException if {@code thingId} is {@code null}.     */
completeInitialResponse,/** * {@inheritDoc} */,/**         * Completes the responseFuture with the response which in turn should send the Persistence actor response to         * the initial sender.         */
removeFeatures,/** * Removes features from this thing. * @return the thing with features removed */,/**     * Removes all Features from a copy of this Thing.     *     * @return a copy of this Thing with all of its Features removed.     */
